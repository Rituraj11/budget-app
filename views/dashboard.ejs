
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@500&display=swap" rel="stylesheet">

    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" integrity="sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <!-- Noty JS urls -->
    <script src="https://cdn.tutorialjinni.com/noty/3.1.4/noty.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.tutorialjinni.com/noty/3.1.4/noty.css" />
    
    <title>Dashboard</title>

    <style>
        .pagination-list{
            padding: 4px 10px;
            /* border: 1px solid grey; */
            background-color: lightseagreen;
            text-decoration: none;
            color: white;
        }

        .pagination-list:hover{
            text-decoration: none;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-light bg-light">
        <span class="navbar-brand mb-0 h1" style="font-family: 'Inter';font-size:xx-large;">YourBudget</span>
        <!-- <span class="navbar-text"> -->
            <!-- Profile -->
            <span id="user_name"></span>
        <!-- </span> -->
    </nav>

    <!-- Button trigger modal -->
    <div style="display: flex; justify-content: space-between;">
        <div>
            <button type="button" class="btn btn-info" data-toggle="modal" data-target="#addBudgetModal">
                <i class="fa fa-plus"></i>
                 &nbsp;Add Budget
            </button>
        </div>
        <div>
            <div class="input-group mb-3">
                <select id="monthFIlterInput" style="padding-left: 10px; border-radius: 5px">
                    <option id="January-option" value="January">January</option>
                    <option id="February-option" value="February">February</option>
                    <option id="March-option" value="March">March</option>
                    <option id="April-option" value="April">April</option>
                    <option id="May-option" value="May">May</option>
                    <option id="June-option" value="June">June</option>
                    <option id="July-option" value="July">July</option>
                    <option id="August-option" value="August">August</option>
                    <option id="September-option" value="September">September</option>
                    <option id="October-option" value="October">October</option>
                    <option id="November-option" value="November">November</option>
                    <option id="December-option" value="December">December</option>
                </select>
                <div class="input-group-append">
                  <button class="btn btn-outline-secondary" type="button" onclick="filterMonth()">Filter</button>
                </div>
              </div>
        </div>
    </div>

    <div class="container" >
        <div class="row" id="budget_cards">
        </div>
    </div>

    <div id="paginate-section" style="display: flex; justify-content: center;">
    </div>

    <!-- Add Modal -->
    <div class="modal fade" id="addBudgetModal" tabindex="-1" role="dialog" aria-labelledby="addBudgetModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
            <h5 class="modal-title" id="addBudgetModalLabel">Add Budget</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                      <label for="formGroupBudgetNameInput">Budget Name</label>
                      <input type="text" class="form-control" id="formGroupBudgetNameInput" placeholder="Enter budget name">
                    </div>
                    <div class="form-group">
                      <label for="formGroupBudgetAmountInput">Budget Amount (in Lakhs)</label>
                      <input type="number" class="form-control" id="formGroupBudgetAmountInput" placeholder="Enter amount (eg: 500000)">
                    </div>
                    <div class="form-group">
                        <label for="inputCategory">Category</label>
                        <select id="inputCategory" class="form-control">
                        </select>
                      </div>
                    <div class="form-group">
                        <label for="formGroupBudgetMonthInput">Budget Month</label>
                        <select id="formGroupBudgetMonthInput" class="form-control">
                            <option id="January-option" value="January">January</option>
                            <option id="February-option" value="February">February</option>
                            <option id="March-option" value="March">March</option>
                            <option id="April-option" value="April">April</option>
                            <option id="May-option" value="May">May</option>
                            <option id="June-option" value="June">June</option>
                            <option id="July-option" value="July">July</option>
                            <option id="August-option" value="August">August</option>
                            <option id="September-option" value="September">September</option>
                            <option id="October-option" value="October">October</option>
                            <option id="November-option" value="November">November</option>
                            <option id="December-option" value="December">December</option>
                        </select> 
                    </div>
                </form>
            </div>
            <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary" onclick="addBudget()">Add</button>
            </div>
        </div>
        </div>
    </div>

      <!-- Update Modal -->
    <div class="modal fade" id="updateBudgetModal" tabindex="-1" role="dialog" aria-labelledby="updateBudgetModalLabel" aria-hidden="true">
        <div id="updateBudgetModalForm" class="modal-dialog" role="document">
        </div>
    </div>

</body>
<script>

    var userData = new Object;
    var categoryData = new Array;

    var currentMonth = new Date().toLocaleString('default', {month: 'long'})

    // Getting all cookies in json
    let cookieTokens = document.cookie
                                .split(';')
                                .map( cookie => cookie.split('='))
                                .reduce( (accumulator, [key, value]) => 
                                ({...accumulator, [key.trim()]: decodeURIComponent(value)}), {} )

    var token = cookieTokens.jwtToken

    var paramArr = window.location.search.split('?').slice(1)[0].split('&')

    // Getting all params in json
    var paramsObj = paramArr.map( data => data.split('='))
            .reduce( (acc, [key, value]) => ({...acc, [key.trim()]: decodeURIComponent(value)}),{})

    if(token == undefined){
        location.replace('/')
        console.log({'message': 'Access denied'})
    }

    // Function to get Loggedin user data
    async function getUserInfo(){

        var requestOptions = {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'auth-token': token
            }
        };

        try{
            let response = await fetch("http://localhost:8000/api/user/me", requestOptions)
            var result = await response.json()

            userData = {...result}

            const html = `<h4>Hi ${userData.name} !</h4>`

            document.querySelector('#user_name').innerHTML = html

            var allCategoryHeader = {
            method: 'GET',
            headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'auth-token': token
                }
            };

            let categotyResponse = await fetch("http://localhost:8000/api/category", requestOptions)
            var categoryResult = await categotyResponse.json()

            categoryData = [...categoryResult]

            if(categoryResult.length == 0){
                var categoryDropdown = `
                <option>No category found</option>
                `;
                document.querySelector('#inputCategory').innerHTML = categoryDropdown  
            }else{
                categoryResult.map( (category, key) => {
                    categoryDropdown = `
                    <option id='${key}'>${category.category_name}</option>
                    `;

                    document.querySelector('#inputCategory').innerHTML += categoryDropdown 
                });

            }

            var allBudgetheaders = {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'auth-token': token
                }
            };

            let budgetResponse = await fetch(`http://localhost:8000/api/budget?filter=${paramsObj.filter}`, allBudgetheaders)
            var budgetResult = await budgetResponse.json()

            if(budgetResult.length == 0){
                var budgetCard = `
                <h6>No Budgets found. Please add Budget</h6>
                `
                document.querySelector('#budget_cards').innerHTML = budgetCard  
            }else{

                let paginatedBudgetList = await fetch(`http://localhost:8000/api/budget?size=${paramsObj.size}&page=${paramsObj.page}&filter=${paramsObj.filter}`, allBudgetheaders)
                var paginatedBudgetResult = await paginatedBudgetList.json()

                paginatedBudgetResult.map( (budget, key) => {
                    budgetCard = `
                    <div class="col-sm-4">
                        <div class="card card${key}" style="width: 18rem; border: 1px solid black; margin: 10px">
                            <div class="card-body">
                                <h5 class="card-title">${budget.budget_name}</h5>
                                <p class="card-text">Category: ${budget.category.category_name}</p>

                                <a href="http://localhost:8000/budget?id=${budget.id}" class="btn btn-success" style="text-decoration:none; color:#fff">View</a>

                                <a class="btn btn-primary" data-toggle="modal" data-target="#updateBudgetModal" onClick="updateBudgetForm(${budget.id},'${budget.budget_name}','${budget.budget_amount}','${budget.category.category_name}','${budget.budget_month}')" style="text-decoration:none; color:#fff">Edit</a>

                                <a class="btn btn-danger" onClick='deleteBudget(${budget.id})' style="text-decoration:none; color:#fff">Delete</a>
                            </div>
                        </div>
                    </div>`;
                    
                    document.querySelector('#budget_cards').innerHTML += budgetCard                     
                })

                var paginationLoop = Math.ceil(budgetResult.length / paramsObj.size)
                for(var i = 1; i <= paginationLoop; i++){
                        var paginateListHTML = `<div style="padding: 0 6px; margin-top: 50px;"><a class="pagination-list" href="http://localhost:8000/dashboard?size=4&page=${i - 1}&filter=${paramsObj.filter}">${i}</a></div>`;

                        document.querySelector('#paginate-section').innerHTML += paginateListHTML
                }
            }

        }catch(err){
            console.log(err)
        }
}

    window.onload = getUserInfo

    // Add budget function
    async function addBudget(){
        let budget_name = document.querySelector('#formGroupBudgetNameInput').value;
        let budget_amount = document.querySelector('#formGroupBudgetAmountInput').value;
        let budget_month = document.querySelector('#formGroupBudgetMonthInput').value;
        let budget_category = document.querySelector('#inputCategory').value;

        if(budget_name != '' && budget_amount != '' && budget_month != ''){
        
            var catId = new Number;
            categoryData.map( category => {
                if(category.category_name == budget_category){
                    catId = category.id 
                } 
            })

            var newBudgetData = JSON.stringify({
                "budget_name": budget_name,
                "budget_amount": budget_amount,
                "budget_month": budget_month,
                "categoryId": catId
            });

            var requestOptions = {
                method: 'POST',
                headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json',
                            'auth-token': token
                        },
                body: newBudgetData,
            }

            try{
                let response = await fetch("http://localhost:8000/api/budget/", requestOptions)
                var result = await response.json()

                console.log(result)
                if(result.ok){
                    console.log(true)
                }

                if(result.message && response.ok){

                    new Noty({
                        type: 'success',
                        layout: 'topRight',
                        theme: 'sunset',
                        timeout: 1000,
                        text: 'Budget Created',
                    }).show();

                    setTimeout( () => {
                        location.reload()
                    }, 1000)
                }else{
                    new Noty({
                        type: 'error',
                        layout: 'topRight',
                        theme: 'sunset',
                        timeout: 1000,
                        text: result.message,
                    }).show();

                    setTimeout( () => {
                        location.reload()
                    }, 1000) 
                }

                // location.reload()
            }catch(err){
                console.log(err)
            }
        }else{
            new Noty({
                type: 'error',
                layout: 'topRight',
                theme: 'sunset',
                timeout: 700,
                text: 'Fields missing',
            }).show();

            setTimeout( () => {
                location.reload()
            }, 1000)
        }
    }

    // Delete budget function
    async function deleteBudget(budgetId){
        try{
            var requestOptions = {
            method: 'DELETE',
            headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'auth-token': token
                }
            };

            let response = await fetch(`http://localhost:8000/api/budget/${budgetId}`, requestOptions)

            if(response.ok){
                new Noty({
                    type: 'success',
                    layout: 'topRight',
                    theme: 'sunset',
                    timeout: 700,
                    text: 'Budget Deleted',
                }).show();

                setTimeout( () => {
                    location.reload()
                }, 1000)
            }else{
                new Noty({
                    type: 'error',
                    layout: 'topRight',
                    theme: 'sunset',
                    timeout: 700,
                    text: 'Somethings wrong! Please retry',
                }).show();

                setTimeout( () => {
                    location.reload()
                }, 1000) 
            }

            // location.reload()
        }catch(err){
            console.log(err)
        }
    }


    // Append update form function
    function updateBudgetForm(budgetId, budgetName, budgetAmount, categoryName, budgetMonth){

        let updateModal = `
        <div class="modal-content">
            <div class="modal-header">
            <h5 class="modal-title" id="updateBudgetModalLabel">Update Budget</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                      <label for="formGroupBudgetNameInput">Budget Name</label>
                      <input type="text" class="form-control" id="formGroupUpdateBudgetNameInput" value="${budgetName}" placeholder="Enter budget name">
                    </div>
                    <div class="form-group">
                      <label for="formGroupBudgetAmountInput">Budget Amount (in Lakhs)</label>
                      <input type="number" class="form-control" id="formGroupUpdateBudgetAmountInput" value="${budgetAmount}" placeholder="Enter amount (eg: 500000)">
                    </div>
                    <div class="form-group">
                        <label for="inputCategory">Category</label>
                        <select id="inputUpdateCategory" class="form-control">
                        </select>
                      </div>
                    <div class="form-group">
                        <label for="formGroupBudgetMonthInput">Budget Month</label>
                        <input type="text" class="form-control" id="formGroupUpdateBudgetMonthInput" value="${budgetMonth}" placeholder="Enter month (eg: May)">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary" onclick="updateBudget(${budgetId})">Update</button>
            </div>
        </div>
        `;

        document.querySelector('#updateBudgetModalForm').innerHTML = updateModal

        categoryData.map( (category, key) => {
            categoryDropdown = `
            <option id='${key}'>${category.category_name}</option>
            `;

            document.querySelector('#inputUpdateCategory').innerHTML += categoryDropdown 
        });

    }


    // Update budget function
    async function updateBudget(budgetId){
        let budget_name = document.querySelector('#formGroupUpdateBudgetNameInput').value;
        let budget_amount = document.querySelector('#formGroupUpdateBudgetAmountInput').value;
        let budget_month = document.querySelector('#formGroupUpdateBudgetMonthInput').value;
        let budget_category = document.querySelector('#inputUpdateCategory').value;

        var catId = new Number;
        categoryData.map( category => {
            if(category.category_name == budget_category){
                catId = category.id 
            } 
        })

        var updateBudgetData = JSON.stringify({
            "budget_name": budget_name,
            "budget_amount": budget_amount,
            "budget_month": budget_month,
            "categoryId": catId
        });

        var requestOptions = {
            method: 'PUT',
            headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'auth-token': token
                    },
            body: updateBudgetData,
        }

        try{
            let response = await fetch(`http://localhost:8000/api/budget/${budgetId}`, requestOptions)
            var result = await response.json()

            if(result.message && response.ok){
                new Noty({
                    type: 'success',
                    layout: 'topRight',
                    theme: 'sunset',
                    timeout: 1000,
                    text: 'Budget Updated',
                }).show();

                setTimeout( () => {
                    location.reload()
                }, 1000)
            }else{
                new Noty({
                    type: 'error',
                    layout: 'topRight',
                    theme: 'sunset',
                    timeout: 1000,
                    text: result.message,
                }).show();

                setTimeout( () => {
                    location.reload()
                }, 1000) 
            }

            // location.reload()
        }catch(err){
            console.log(err)
        }
    }

    // Month filter funtion
    function filterMonth(){
        console.log('test clicked')
        console.log(document.querySelector('#monthFIlterInput').value)
        var filteredMonth = document.querySelector('#monthFIlterInput').value

        window.location.replace(`http://localhost:8000/dashboard?size=4&page=0&filter=${filteredMonth}`);
    }

</script>